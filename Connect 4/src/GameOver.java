import java.io.*;
import java.text.DecimalFormat;
import java.util.ArrayList;

/*
 * Name: Mrugank Upadhyay
 * Date: August 21st, 2018
 * Title: Game Over
 * Purpose: Displays game over screen, congratulates players, and outputs score to file
 */

public class GameOver extends javax.swing.JFrame {

    /**
     * Creates new form GameOver
     */
    public GameOver() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupPlayer = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaDisplay = new javax.swing.JTextArea();
        radBtnPlayer1 = new javax.swing.JRadioButton();
        radBtnPlayer2 = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 255, 255));

        jLabel1.setBackground(new java.awt.Color(0, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GameOver2.png"))); // NOI18N

        txtAreaDisplay.setEditable(false);
        txtAreaDisplay.setColumns(20);
        txtAreaDisplay.setFont(new java.awt.Font("Harlow Solid Italic", 0, 36)); // NOI18N
        txtAreaDisplay.setLineWrap(true);
        txtAreaDisplay.setRows(5);
        txtAreaDisplay.setWrapStyleWord(true);
        txtAreaDisplay.setOpaque(false);
        jScrollPane1.setViewportView(txtAreaDisplay);

        radBtnPlayer1.setBackground(new java.awt.Color(0, 255, 255));
        btnGroupPlayer.add(radBtnPlayer1);
        radBtnPlayer1.setFont(new java.awt.Font("Harlow Solid Italic", 0, 20)); // NOI18N
        radBtnPlayer1.setText("Player 1 Scores");
        radBtnPlayer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radBtnPlayer1ActionPerformed(evt);
            }
        });

        radBtnPlayer2.setBackground(new java.awt.Color(0, 255, 255));
        btnGroupPlayer.add(radBtnPlayer2);
        radBtnPlayer2.setFont(new java.awt.Font("Harlow Solid Italic", 0, 20)); // NOI18N
        radBtnPlayer2.setText("Player 2 Scores");
        radBtnPlayer2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radBtnPlayer2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(61, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(327, 327, 327))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radBtnPlayer1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radBtnPlayer2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(196, 196, 196))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(23, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(radBtnPlayer1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radBtnPlayer2)
                        .addGap(169, 169, 169))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    //To format decimals to 2 decimal places
    DecimalFormat decimalFormat = new DecimalFormat("###.0#");
    
    private void radBtnPlayer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radBtnPlayer1ActionPerformed
        
        //Sets the file location to player's file
        strFile = "Player 1 Scores.txt";
        //Retrieves the old data
        Retrieve();
        //Sends the data to the file
        SendToFile();
        
        //Displays congratulatory message
        txtAreaDisplay.setText("Player 1's win ratio for today is " + intPlayer1Score / intTotal * 100 + ". \n"
                + "Their greatest win ratio was " + listFileInput.get(listFileInput.size() - 1)
                + "\nTheir average so far has been " + decimalFormat.format(Average())
                + "\n\nHope you have enjoyed!");
    }//GEN-LAST:event_radBtnPlayer1ActionPerformed

    private void radBtnPlayer2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radBtnPlayer2ActionPerformed
        
        //Same as player 1
        strFile = "Player 2 Scores.txt";
        Retrieve();
        SendToFile();
        txtAreaDisplay.setText("Player 2's win ratio for today is " + intPlayer2Score / intTotal * 100 + ". \n"
                + "Their greatest win ratio was " + listFileInput.get(listFileInput.size() - 1)
                + "\nTheir average so far has been " + decimalFormat.format(Average())
                + "\n\nHope you have enjoyed!");
    }//GEN-LAST:event_radBtnPlayer2ActionPerformed

    
    //Declare global game instance and IO objects
    GameScreen play = new GameScreen();
    
    //Declares score and calulation
    //Retrieves score from Game Screen file
    double intPlayer1Score = play.intPlayer1Score;
    double intPlayer2Score = play.intPlayer2Score;
    double intTotal = intPlayer1Score + intPlayer2Score;
    
    String strFile;
    
    
    public void SendToFile()
    {
        //Sorts the player's scores in the file.
        quickSort(0, listFileInput.size() - 1);
        
        try
        {
            //Creates a new writer to output to file
            FileWriter fw = new FileWriter(strFile);
            PrintWriter Print = new PrintWriter(fw);
            
            if (radBtnPlayer1.isSelected())
            {
                //Calculates win ratio
                double intWinRatio = (intPlayer1Score / intTotal) * 100;
               
                //Searches for ratio in file
                int intIndex = BinarySearch(intWinRatio, 0, listFileInput.size() - 1);
                //If found, it adds the ratio after previous
                if (intIndex >= 0)
                {
                    listFileInput.add(intIndex, String.valueOf(intWinRatio));
  
                }
                //If not found, it add the ratio at the end
                else
                {
                    listFileInput.add(String.valueOf(intWinRatio));
                }
                
                //Prints the previous file content and updated content
                for (int i = 0; i < listFileInput.size(); i++)
                    {
                        Print.println(listFileInput.get(i));
                    }
            }
            
            //Same as player 1 selection
            else if (radBtnPlayer2.isSelected())
            {
                double intWinRatio = (intPlayer2Score / intTotal) * 100;
                
                int intIndex = BinarySearch(intWinRatio, 0, listFileInput.size() - 1);
                
                if (intIndex >= 0)
                {
                    listFileInput.add(intIndex, String.valueOf(intWinRatio));
  
                }
                else
                {
                    listFileInput.add(String.valueOf(intWinRatio));
                }
                
                for (int i = 0; i < listFileInput.size(); i++)
                {
                    Print.println(listFileInput.get(i));
                }
            }
            
            //Flushes and closes stream
            Print.flush();
            Print.close();
        }
        //Catches any input/output exception
        catch (IOException e)
        {
            e.printStackTrace();
        }
        
        
    }
    
    //Creates an arraylist to hold previous data of file
    ArrayList<String> listFileInput = new ArrayList();
    
    //Get what is in the file first
    public void Retrieve()
    {
        //Creates a string to store immediate input from reader
        String strInput;
        //clears arraylist to begin new storing process
        listFileInput.removeAll(listFileInput);
        
        try
        {
            //Creates reader object
            FileReader fr = new FileReader(strFile);
            BufferedReader bufferedReader = new BufferedReader(fr);
            
            //reads immediate line
            strInput = bufferedReader.readLine();
            //As long as it isnt empty
            while (strInput != null)
            {
                //Add the line to the arraylist
                listFileInput.add(strInput);
                //read next line
                strInput = bufferedReader.readLine();
            }
            //Close reader
            bufferedReader.close();
        }
        
        //Catch input/output exception
        catch (IOException e)
        {
          e.printStackTrace();  
        }
    }
    
    /**
     * 
     * @param dblReference the number (ratio) being searched
     * @param intLeft pointer to left end of current array search
     * @param intRight pointer to right end of current array search
     * @return 
     */
    public int BinarySearch(double dblReference, int intLeft, int intRight)
    {
        //If the left value is greater than right, the score was not found
        if (intLeft > intRight)
        {
            return -1;
        }
        
        //Find midpoint of array
        int intMid = (intLeft + intRight) / 2;
         
        //Check midpoint of array to see if reference ratio is found
        if (dblReference == Double.parseDouble(listFileInput.get(intMid)))
        {
            
            return intMid;
        }
        
        //If not found yet, but reference ratio is less than ratio being searched, 
        //Partition array to check for lower middle value, between left most and mid
        else if (dblReference < Double.parseDouble(listFileInput.get(intMid)))
        {
            //Recurse through search
            return BinarySearch(dblReference, intLeft, intMid - 1);
        }
        
        //If not found yet, but reference ratio is greater than ratio being searched
        //Partition array to check for upper middle value, between right most and mid
        else
        {
            //Recurse through search
            return BinarySearch(dblReference, intMid + 1, intRight);
        }
    }
    
    /**
     * 
     * @param intLeft the left end of partitioned arraylist
     * @param intRight the right end of partitioned arraylist
     */
     public void quickSort(int intLeft, int intRight) 
    {

        //Takes the index of the partition
        int intIndex = partition(intLeft, intRight);

        //Sorts left end recursively
        if (intLeft < intIndex - 1)
        {
            quickSort(intLeft, intIndex - 1);
        }
    
        //Sorts right end recursively
        if (intIndex < intRight)
        {
            quickSort(intIndex, intRight);
        }
    }
    
    /**
     * 
     * @param intLeft the left "pointer" for index
     * @param intRight the right "pointer" for index
     * @return the index of partition
     */
    public int partition(int intLeft, int intRight)
    {

        //Declare variables for "pointers"
        int intL = intLeft;
        int intR = intRight;
        double dblTemp;
        double dblPivot = Double.parseDouble(listFileInput.get((intLeft + intRight) / 2));
        
        //While the left end is less than the right end
        while (intL <= intR) 
        {
            //The left element is less than the pivot point, increase left end
            while (Double.parseDouble(listFileInput.get(intL)) < dblPivot)
            {
                  intL++;
            }

            //The right element is greater than pivot point, decrease right end
            while (Double.parseDouble(listFileInput.get(intR)) > dblPivot)
            {
                  intR--;
            }

            //Swaps the two elements if left is less than right
            if (intL <= intR) 
            {
                //Left end placed in temp position
                dblTemp = Double.parseDouble(listFileInput.get(intL));
                //left equals right
                listFileInput.set(intL, listFileInput.get(intR));
                //right equals left (taken from temp)
                listFileInput.set(intR, String.valueOf(dblTemp));
                
                //Both are incremented to get closer to each other
                intL++;
                intR--;
            }
        }

        //Return let index
        return intL;

    }  
    
    //The player's average is calculated
    public double Average()
    {
        //A sum variable is declared
        double dblSum = 0;
        
        //Iterates through arraylist summing scores
        for (int i = 0; i < listFileInput.size(); i++)
        {
            dblSum += Double.parseDouble(listFileInput.get(i));
        }
        
        //Returns the average
         return  (dblSum / listFileInput.size());
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameOver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameOver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameOver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameOver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameOver().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGroupPlayer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton radBtnPlayer1;
    private javax.swing.JRadioButton radBtnPlayer2;
    private javax.swing.JTextArea txtAreaDisplay;
    // End of variables declaration//GEN-END:variables
}
