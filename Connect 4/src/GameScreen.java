
import java.awt.event.*;
import javax.swing.ImageIcon;
import javax.swing.*;

/*
 * Name: Mrugank Upadhyay
 * Date: August 21st, 2018
 * Title: Game Screen
 * Purpose: Contains the game screen where the users will play
 */

public class GameScreen extends javax.swing.JFrame{

    
    //Global variables
    
    //Shifts dictate the spacing between each of the buttons on the board so they fit the "holes" in the board
    //And are as evenly spaced as possible
    final int intX_SHIFT_GRID = 141;
    final int intY_SHIFT_GRID = 75;
    final int intX_SHIFT_DROP = 140;
    
    public static int intPlayer1Score = 0;
    public static int intPlayer2Score = 0;
    
//    int player1FinalScore = Player1Score;
//    int player2FinalScore = Player2Score;
    
    //token icons made global for ease of access
    ImageIcon imgBlackToken = new ImageIcon("Black Token.png");
    ImageIcon imgRedToken = new ImageIcon("Red Token.png");
    
    
    /**
     * Creates new form GameScreen
     */
    public GameScreen() 
    {
        
        initComponents();
        //Make it unresizable
        this.setResizable(false);
        
        //Add buttons and label onto different depths
        layerPaneScreen.add(btnColumn1, new Integer(2));
        layerPaneScreen.add(btnColumn2, new Integer(2));
        layerPaneScreen.add(btnColumn3, new Integer(2));
        layerPaneScreen.add(btnColumn4, new Integer(2));
        layerPaneScreen.add(btnColumn5, new Integer(2));
        layerPaneScreen.add(btnColumn6, new Integer(2));
        layerPaneScreen.add(btnColumn7, new Integer(2));
        layerPaneScreen.add(lblBoard, new Integer(3));
        //Set size of label
        lblBoard.setBounds(0,0,1000,575);
        
        //set location of drop buttons
        btnColumn1.setLocation(30,10);
        btnColumn2.setLocation(37 + intX_SHIFT_DROP,10);
        btnColumn3.setLocation(37 + intX_SHIFT_DROP * 2,10);
        btnColumn4.setLocation(37 + intX_SHIFT_DROP * 3,10);
        btnColumn5.setLocation(37 + intX_SHIFT_DROP * 4,10);
        btnColumn6.setLocation(37 + intX_SHIFT_DROP * 5,10);
        btnColumn7.setLocation(37 + intX_SHIFT_DROP * 6,10);
        
        //Set transparent
        btnColumn1.setOpaque(false);
        btnColumn1.setContentAreaFilled(false);
        btnColumn2.setOpaque(false);
        btnColumn2.setContentAreaFilled(false);
        btnColumn3.setOpaque(false);
        btnColumn3.setContentAreaFilled(false);
        btnColumn4.setOpaque(false);
        btnColumn4.setContentAreaFilled(false);
        btnColumn5.setOpaque(false);
        btnColumn5.setContentAreaFilled(false);
        btnColumn6.setOpaque(false);
        btnColumn6.setContentAreaFilled(false);
        btnColumn7.setOpaque(false);
        btnColumn7.setContentAreaFilled(false);
        
        //set icon of label
        ImageIcon img = new ImageIcon("Connect4Board1000x450.png");
        lblBoard.setIcon(img);
        
        //create the 7x6 grid of buttons
        CreateButtonArray();
        
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        layerPaneScreen = new javax.swing.JLayeredPane();
        lblBoard = new javax.swing.JLabel();
        btnColumn1 = new javax.swing.JButton();
        btnColumn2 = new javax.swing.JButton();
        btnColumn3 = new javax.swing.JButton();
        btnColumn4 = new javax.swing.JButton();
        btnColumn5 = new javax.swing.JButton();
        btnColumn6 = new javax.swing.JButton();
        btnColumn7 = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnDone = new javax.swing.JButton();
        txtPlayer1Score = new javax.swing.JTextField();
        txtPlayer2Score = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        layerPaneScreen.setBackground(new java.awt.Color(255, 255, 0));
        layerPaneScreen.setForeground(new java.awt.Color(255, 255, 0));

        lblBoard.setBackground(new java.awt.Color(255, 255, 0));

        btnColumn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Down Arrow 47 x 70.png"))); // NOI18N
        btnColumn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColumn1ActionPerformed(evt);
            }
        });

        btnColumn2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Down Arrow 47 x 70.png"))); // NOI18N
        btnColumn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColumn2ActionPerformed(evt);
            }
        });

        btnColumn3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Down Arrow 47 x 70.png"))); // NOI18N
        btnColumn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColumn3ActionPerformed(evt);
            }
        });

        btnColumn4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Down Arrow 47 x 70.png"))); // NOI18N
        btnColumn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColumn4ActionPerformed(evt);
            }
        });

        btnColumn5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Down Arrow 47 x 70.png"))); // NOI18N
        btnColumn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColumn5ActionPerformed(evt);
            }
        });

        btnColumn6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Down Arrow 47 x 70.png"))); // NOI18N
        btnColumn6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColumn6ActionPerformed(evt);
            }
        });

        btnColumn7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Down Arrow 47 x 70.png"))); // NOI18N
        btnColumn7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColumn7ActionPerformed(evt);
            }
        });

        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Back Arrow.png"))); // NOI18N
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Harlow Solid Italic", 0, 36)); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnDone.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Forward Arrow.png"))); // NOI18N
        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });

        txtPlayer1Score.setEditable(false);
        txtPlayer1Score.setFont(new java.awt.Font("Harlow Solid Italic", 0, 24)); // NOI18N
        txtPlayer1Score.setText("Player 1: 0");
        txtPlayer1Score.setToolTipText("");

        txtPlayer2Score.setEditable(false);
        txtPlayer2Score.setFont(new java.awt.Font("Harlow Solid Italic", 0, 24)); // NOI18N
        txtPlayer2Score.setText("Player 2: 0");

        layerPaneScreen.setLayer(lblBoard, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layerPaneScreen.setLayer(btnColumn1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layerPaneScreen.setLayer(btnColumn2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layerPaneScreen.setLayer(btnColumn3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layerPaneScreen.setLayer(btnColumn4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layerPaneScreen.setLayer(btnColumn5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layerPaneScreen.setLayer(btnColumn6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layerPaneScreen.setLayer(btnColumn7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layerPaneScreen.setLayer(btnBack, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layerPaneScreen.setLayer(btnReset, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layerPaneScreen.setLayer(btnDone, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layerPaneScreen.setLayer(txtPlayer1Score, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layerPaneScreen.setLayer(txtPlayer2Score, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layerPaneScreenLayout = new javax.swing.GroupLayout(layerPaneScreen);
        layerPaneScreen.setLayout(layerPaneScreenLayout);
        layerPaneScreenLayout.setHorizontalGroup(
            layerPaneScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layerPaneScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layerPaneScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layerPaneScreenLayout.createSequentialGroup()
                        .addComponent(btnColumn1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnColumn2)
                        .addGap(18, 18, 18)
                        .addComponent(btnColumn3)
                        .addGap(41, 41, 41)
                        .addComponent(btnColumn4)
                        .addGap(31, 31, 31)
                        .addComponent(btnColumn5)
                        .addGap(52, 52, 52)
                        .addComponent(btnColumn6)
                        .addGap(42, 42, 42)
                        .addComponent(btnColumn7)
                        .addGap(271, 271, 271))
                    .addGroup(layerPaneScreenLayout.createSequentialGroup()
                        .addGroup(layerPaneScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBoard, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layerPaneScreenLayout.createSequentialGroup()
                                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPlayer1Score, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPlayer2Score, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDone, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layerPaneScreenLayout.setVerticalGroup(
            layerPaneScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layerPaneScreenLayout.createSequentialGroup()
                .addComponent(lblBoard, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layerPaneScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnColumn3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnColumn4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnColumn5, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layerPaneScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnColumn1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnColumn2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnColumn6, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnColumn7, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 447, Short.MAX_VALUE)
                .addGroup(layerPaneScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnReset, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDone, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPlayer1Score)
                    .addComponent(txtPlayer2Score)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(layerPaneScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(layerPaneScreen)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnColumn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColumn1ActionPerformed
        
        //Add btnToken to 1st column
        AddToken(0);
    }//GEN-LAST:event_btnColumn1ActionPerformed

    private void btnColumn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColumn2ActionPerformed
        
        AddToken(1);
    }//GEN-LAST:event_btnColumn2ActionPerformed

    private void btnColumn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColumn3ActionPerformed
        
        AddToken(2);
    }//GEN-LAST:event_btnColumn3ActionPerformed

    private void btnColumn4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColumn4ActionPerformed
        
        AddToken(3);
    }//GEN-LAST:event_btnColumn4ActionPerformed

    private void btnColumn5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColumn5ActionPerformed
        
        AddToken(4);
    }//GEN-LAST:event_btnColumn5ActionPerformed

    private void btnColumn6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColumn6ActionPerformed
        
        AddToken(5);
    }//GEN-LAST:event_btnColumn6ActionPerformed

    private void btnColumn7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColumn7ActionPerformed
        
        AddToken(6);
    }//GEN-LAST:event_btnColumn7ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        
        //Sets this frame to be invisible
        this.setVisible(false);
        //creates object of main frame
        Connect4Main MainFrame = new Connect4Main();
        //sets mainframe to visible
        MainFrame.setVisible(true);
        //makes it the same location as this frame
        MainFrame.setLocation(this.getLocation().x, this.getLocation().y);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        
        //Resets Board
        for (int i = 0; i < 7; i++)
        {
            for (int j = 0; j < 6; j++)
            {
                //Iterates through entire grid and removes icon
                btnToken[i][j].setIcon(null);
                intGameBoard[i][j] = 0;
            }
        }
        
        //re-enables buttons
        EnableBoardButton(true);
        EnableDropButton(true);
        
        //Updates score
        UpdateScore();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneActionPerformed
        
        //same as mainframe
        this.setVisible(false);
        GameOver overFrame = new GameOver();
        overFrame.setVisible(true);
        overFrame.setLocation(this.getLocation().x, this.getLocation().y);
    }//GEN-LAST:event_btnDoneActionPerformed

    private void ActionPerformed(java.awt.event.ActionEvent e)
    {
        //When a button is clicked, it gets its x and y coordinates
        int x = Integer.parseInt(String.valueOf(e.getActionCommand().charAt(0)));
        int y = Integer.parseInt(String.valueOf(e.getActionCommand().charAt(1)));
                    
        if (intPlayerCounter % 2 + 1 == intGameBoard[x][y])
        {
            //If the players turn matches their piece
            for (; y >= 0; y--)
            {
                //If the pieces is at the top
                //Set icon to nothing
                if (y == 0)
                {
                    intGameBoard[x][y] = 0;
                    btnToken[x][y].setIcon(null);
                }
                
                //Else, drop all pieces down
                else
                {
                    intGameBoard[x][y] = intGameBoard[x][y-1];
                    //Assign icon depending on the btnToken
                    switch(intGameBoard[x][y])
                    {
                        case 1:
                            btnToken[x][y].setIcon(imgBlackToken);
                            break;
                        case 2:
                            btnToken[x][y].setIcon(imgRedToken);
                            break;
                        default:
                            btnToken[x][y].setIcon(null);
                            break;
                    }
                }          
            }
            
            //Check for win
            WinCheck();
            
            //Change turn
            intPlayerCounter++;
        }
        
        //If button doesnt match their piece, error message
        else
        {
            JOptionPane.showMessageDialog(this, "Not your piece! Select one of your own.");
        }
    }               

    //Declares a 2D array of buttons
    JButton[][] btnToken = new JButton [7][6];
    //Immitates game board. A 0 is an empty space, 1 is player 1's btnToken, 2 is player 2's btnToken
    int[][] intGameBoard = new int [7][6];
    
    public void CreateButtonArray()
    {
        //Creates the buttons by looping through array
        for (int i = 0; i < 7; i++)
        {
            for (int j = 0; j < 6; j++)
            {
                btnToken [i][j] = new JButton();
                
                //sets transparent
                btnToken[i][j].setOpaque(false);
                btnToken [i][j].setContentAreaFilled(false);
                //Sets size and location
                btnToken [i][j].setBounds(20 + i * intX_SHIFT_GRID,65 + j * intY_SHIFT_GRID,115,71);
                
                //Gives a action command to coordinates
                btnToken [i][j].setActionCommand(i+""+j);
                
                //Adds an action listener
                btnToken [i][j].addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) 
                {
                    ActionPerformed(evt);
                }});
                
                //Adds the buttons on the same plane
                layerPaneScreen.add(btnToken[i][j], 2);
                
                //Create a blank game board, where 0 is an empty slot
                intGameBoard[i][j] = 0;
            }
        }
    }
    
    /**
     * 
     * @param intColumn adds the btnToken to a specific column
     */
    public void AddToken(int intColumn)
    {
        //Searches for an open slot and returns index
        int intIndex = SearchOpenSlot(intColumn);
        
        //if a slot is found
        if (intIndex >= 0)
        {
            PlayerTurn(intColumn, intIndex);
        }
        
       //Checks for a win
       WinCheck();
    }
    
    /**
     * 
     * @param intColumn is the column to be searched
     * @return 
     */
    public int SearchOpenSlot(int intColumn)
    {
        //Sets index as -1 by default: not found
        int intIndex = -1;
        
        for (int i = 5; i >= 0; i--)
        {
            //If the gameboard has an empty slot, return index
            if (intGameBoard[intColumn][i] == 0)
            {
                return i;
            }
        }
        
        return intIndex;
    }
    
    int intPlayerCounter = 0;
    /**
     * 
     * @param intX the intX coordinate of button
     * @param intY the intY coordinate of button
     */
    public void PlayerTurn(int intX, int intY)
    {
        
        if (intPlayerCounter % 2 == 0)
        {
            btnToken[intX][intY].setIcon(imgBlackToken);
            intGameBoard[intX][intY] = 1;
        }
        
        else
        {
            btnToken[intX][intY].setIcon(imgRedToken);
            intGameBoard[intX][intY] = 2;
        }
             
        intPlayerCounter++;
    }
    
    //Updates score to textfield
    public void UpdateScore()
    {
            txtPlayer1Score.setText("Player 1: " + intPlayer1Score);
            txtPlayer2Score.setText("Player 2: " + intPlayer2Score);
    }
    
    /**
     * 
     * @param isEnabled whether button should be enabled or not
     */
    public void EnableDropButton(boolean isEnabled)
    {
        //Enables or disables buttons
        btnColumn1.setEnabled(isEnabled);
        btnColumn2.setEnabled(isEnabled);
        btnColumn3.setEnabled(isEnabled);
        btnColumn4.setEnabled(isEnabled);
        btnColumn5.setEnabled(isEnabled);
        btnColumn6.setEnabled(isEnabled);
        btnColumn7.setEnabled(isEnabled);
    }
    
    /**
     * 
     * @param isEnabled whether the button should be enabled or not
     */
    public void EnableBoardButton(boolean isEnabled)
    {
        //Loops through array to isEnabled or disable buttons
            for (int x = 0; x < 7; x++)
            {
                for (int y = 0; y < 6; y++)
                {
                    btnToken[x][y].setEnabled(isEnabled);
                }
            }
    }
    
    
    //This just makes it easier to deal with redundant checking.
    //If any one detects a win first, the remaining don't run.
    public void WinCheck()
    {
        if (WinCheckRow(5,0))
        {
            return;
        }
        else if (WinCheckColumn(0,4))
        {
            return;
        }
        else if (WinCheckForwardDiagonal())
        {
            return;
        }
        
        else
        {
            WinCheckBackwardDiagonal();
        }
        
    }
    
    //This is to ensure code is not repeated.
    public void WinMessage(int intPlayer)
    {
        JOptionPane.showMessageDialog(this, "Player " + intPlayer + " wins this game! Congratulations!");
    }
    
    //Note: An iterative method would have actually been slightly more efficient in terms of amount of code used to check wins
    //However, the rubric stated to use the structures "throughout" the code and so a recursive method was used here.
    //At such a small level, functionality is actual not hindered noticeably and thus it will not be a problem, only that the amount of code is slightly larger
    //The only other place recursion occurs is during quick sort in the game over screen. Thus at least 3 occurances of recursion should count as "throughout"
    
    /**
     * 
     * @param intRow the intRow of board
     * @param intColumn the intColumn of board
     * @return if there was a win
     */
    public boolean WinCheckRow(int intRow, int intColumn)
    {  
        for (; intColumn < 4; intColumn++)
        {
            //If it is the final 4 slots
            if (intRow == 0 && intColumn == 3)
            {
                //If any 4 in a intRow
                if (intGameBoard[intColumn][intRow] == 1 && intGameBoard[intColumn + 1][intRow] == 1 && intGameBoard[intColumn + 2][intRow] == 1 && intGameBoard[intColumn + 3][intRow] == 1)
                {
                    //disable buttons
                    EnableDropButton(false);
                    EnableBoardButton(false);
                    
                    //increase player score
                    intPlayer1Score++;
                    
                    //send win message
                    WinMessage(1);
                    return true;
                }
                
                //Same as player 1, but for player 2
                else if (intGameBoard[intColumn][intRow] == 2 && intGameBoard[intColumn + 1][intRow] == 2 && intGameBoard[intColumn + 2][intRow] == 2 && intGameBoard[intColumn + 3][intRow] == 2)
                {
                    EnableDropButton(false);
                    EnableBoardButton(false);
                    intPlayer2Score++;
                    WinMessage(2);
                    return true;
                }
                //If no wins
                else
                {
                    return false;
                }
            }
            
            //Same as above, but from the beginning of check to the end
            else 
            {
                if (intGameBoard[intColumn][intRow] == 1 && intGameBoard[intColumn + 1][intRow] == 1 && intGameBoard[intColumn + 2][intRow] == 1 && intGameBoard[intColumn + 3][intRow] == 1)
                {
                    EnableDropButton(false);
                    EnableBoardButton(false);
                    intPlayer1Score++;
                    WinMessage(1);
                    return true;
                }
                else if (intGameBoard[intColumn][intRow] == 2 && intGameBoard[intColumn + 1][intRow] == 2 && intGameBoard[intColumn + 2][intRow] == 2 && intGameBoard[intColumn + 3][intRow] == 2)
                {
                    EnableDropButton(false);
                    EnableBoardButton(false);
                    intPlayer2Score++;
                    WinMessage(2);
                    return true;
                }
            }
        }
        
        //Recurses check
        return WinCheckRow(intRow - 1, 0);
    }
    
    /**
     * 
     * @param intRow the intRow of board
     * @param intColumn the intColumn of board
     * @return if there was a win
     */
    public boolean WinCheckColumn(int intRow, int intColumn)
    {
        for (; intRow < 3; intRow++)
        {
            //Same as wincheckrow but checks columns instead and thus iterates columns
            if (intRow == 2 && intColumn == 0)
            {
                if (intGameBoard[intColumn][intRow] == 1 && intGameBoard[intColumn][intRow + 1] == 1 && intGameBoard[intColumn][intRow + 2] == 1 && intGameBoard[intColumn][intRow + 3] == 1)
                {
                    EnableDropButton(false);
                    EnableBoardButton(false);
                    intPlayer1Score++;
                    WinMessage(1);
                    return true;
                }
                else if (intGameBoard[intColumn][intRow] == 2 && intGameBoard[intColumn][intRow + 1] == 2 && intGameBoard[intColumn][intRow + 2] == 2 && intGameBoard[intColumn][intRow + 3] == 2)
                {
                    EnableDropButton(false);
                    EnableBoardButton(false);
                    intPlayer2Score++;
                    WinMessage(2);
                     return true;
                }
                else
                {
                    return false;
                }
            }
            
            else 
            {
                if (intGameBoard[intColumn][intRow] == 1 && intGameBoard[intColumn][intRow + 1] == 1 && intGameBoard[intColumn][intRow + 2] == 1 && intGameBoard[intColumn][intRow + 3] == 1)
                {
                    EnableDropButton(false);
                    EnableBoardButton(false);
                    intPlayer1Score++;
                    WinMessage(1);
                    return true;
                }
                else if (intGameBoard[intColumn][intRow] == 2 && intGameBoard[intColumn][intRow + 1] == 2 && intGameBoard[intColumn][intRow + 2] == 2 && intGameBoard[intColumn][intRow + 3] == 2)
                {
                    EnableDropButton(false);
                    EnableBoardButton(false);
                    intPlayer2Score++;
                    WinMessage(2);
                    return true;
                 }
            }
        }
        
        //Recurses check
        return WinCheckColumn(0, intColumn - 1);
    }
    
    //So to ensure that an iterative method is also used to check for a win, the diagonals will be done using nested for-loops
    
    public boolean WinCheckForwardDiagonal()
    {
        //Iterates through all possible forward diagonals on board
        for (int i = 6; i > 2; i-- )
        {
            for (int j = 5; j > 2; j--)
            {
                //If there is a 4 in a row
                if (intGameBoard[i][j] == 1 && intGameBoard[i-1][j-1] == 1 && intGameBoard[i-2][j-2] == 1 && intGameBoard[i-3][j-3] == 1)
                {
                    //Disable buttons
                    EnableDropButton(false);
                    EnableBoardButton(false);
                    
                    //increase score
                    intPlayer1Score++;
                    
                    //send win message
                    WinMessage(1);
                    return true;
                }
                
                //Same as player 1 but for player 2
                else if (intGameBoard[i][j] == 2 && intGameBoard[i-1][j-1] == 2 && intGameBoard[i-2][j-2] == 2 && intGameBoard[i-3][j-3] == 2)
                {
                    EnableDropButton(false);
                    EnableBoardButton(false);
                    intPlayer2Score++;
                    WinMessage(2);
                    return true;
                }
            }
        }
        
        return false;
    }
    
    //This is the same as forward check except the locations are reversed. Instead of i-1 and j+1, it is i+1 and j-1.
    public boolean WinCheckBackwardDiagonal()
    {
        //Same as forward diagonal check except check starts from right hand side and goes backwards
        for (int i = 0; i < 4; i++ )
        {
            for (int j = 5; j > 2; j--)
            {
                if (intGameBoard[i][j] == 1 && intGameBoard[i+1][j-1] == 1 && intGameBoard[i+2][j-2] == 1 && intGameBoard[i+3][j-3] == 1)
                {
                    EnableDropButton(false);
                    EnableBoardButton(false);
                    intPlayer1Score++;
                    WinMessage(1);
                    return true;
                }
                else if (intGameBoard[i][j] == 2 && intGameBoard[i+1][j-1] == 2 && intGameBoard[i+2][j-2] == 2 && intGameBoard[i+3][j-3] == 2)
                {
                    EnableDropButton(false);
                    EnableBoardButton(false);
                    intPlayer2Score++;
                    WinMessage(2);
                    return true;
                }
            }
        }
        
        return false;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnColumn1;
    private javax.swing.JButton btnColumn2;
    private javax.swing.JButton btnColumn3;
    private javax.swing.JButton btnColumn4;
    private javax.swing.JButton btnColumn5;
    private javax.swing.JButton btnColumn6;
    private javax.swing.JButton btnColumn7;
    private javax.swing.JButton btnDone;
    private javax.swing.JButton btnReset;
    private javax.swing.JLayeredPane layerPaneScreen;
    private javax.swing.JLabel lblBoard;
    private javax.swing.JTextField txtPlayer1Score;
    private javax.swing.JTextField txtPlayer2Score;
    // End of variables declaration//GEN-END:variables
}
